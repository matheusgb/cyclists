// Code generated by MockGen. DO NOT EDIT.
// Source: src/models/repositories/bikeEvent/bikeEventRepository.go
//
// Generated by this command:
//
//	mockgen -source=src/models/repositories/bikeEvent/bikeEventRepository.go -destination=src/tests/mocks/bikeEventRepository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domains "github.com/matheusgb/cyclists/src/models/domains/bikeEvent"
	domains0 "github.com/matheusgb/cyclists/src/models/domains/pagination"
	entities "github.com/matheusgb/cyclists/src/models/repositories/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockIBikeEvent is a mock of IBikeEvent interface.
type MockIBikeEvent struct {
	ctrl     *gomock.Controller
	recorder *MockIBikeEventMockRecorder
}

// MockIBikeEventMockRecorder is the mock recorder for MockIBikeEvent.
type MockIBikeEventMockRecorder struct {
	mock *MockIBikeEvent
}

// NewMockIBikeEvent creates a new mock instance.
func NewMockIBikeEvent(ctrl *gomock.Controller) *MockIBikeEvent {
	mock := &MockIBikeEvent{ctrl: ctrl}
	mock.recorder = &MockIBikeEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBikeEvent) EXPECT() *MockIBikeEventMockRecorder {
	return m.recorder
}

// CreateBikeEvent mocks base method.
func (m *MockIBikeEvent) CreateBikeEvent(bikeEvent domains.BikeEvent) (entities.BikeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBikeEvent", bikeEvent)
	ret0, _ := ret[0].(entities.BikeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBikeEvent indicates an expected call of CreateBikeEvent.
func (mr *MockIBikeEventMockRecorder) CreateBikeEvent(bikeEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBikeEvent", reflect.TypeOf((*MockIBikeEvent)(nil).CreateBikeEvent), bikeEvent)
}

// DeleteBikeEvent mocks base method.
func (m *MockIBikeEvent) DeleteBikeEvent(bikeEvent domains.BikeEvent) (entities.BikeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBikeEvent", bikeEvent)
	ret0, _ := ret[0].(entities.BikeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBikeEvent indicates an expected call of DeleteBikeEvent.
func (mr *MockIBikeEventMockRecorder) DeleteBikeEvent(bikeEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBikeEvent", reflect.TypeOf((*MockIBikeEvent)(nil).DeleteBikeEvent), bikeEvent)
}

// DeleteBikeEventAdmin mocks base method.
func (m *MockIBikeEvent) DeleteBikeEventAdmin(bikeEvent domains.BikeEvent) (entities.BikeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBikeEventAdmin", bikeEvent)
	ret0, _ := ret[0].(entities.BikeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBikeEventAdmin indicates an expected call of DeleteBikeEventAdmin.
func (mr *MockIBikeEventMockRecorder) DeleteBikeEventAdmin(bikeEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBikeEventAdmin", reflect.TypeOf((*MockIBikeEvent)(nil).DeleteBikeEventAdmin), bikeEvent)
}

// GetAllBikeEvents mocks base method.
func (m *MockIBikeEvent) GetAllBikeEvents(pag *domains0.Pagination, name string) (*domains0.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBikeEvents", pag, name)
	ret0, _ := ret[0].(*domains0.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBikeEvents indicates an expected call of GetAllBikeEvents.
func (mr *MockIBikeEventMockRecorder) GetAllBikeEvents(pag, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBikeEvents", reflect.TypeOf((*MockIBikeEvent)(nil).GetAllBikeEvents), pag, name)
}

// GetBikeEvent mocks base method.
func (m *MockIBikeEvent) GetBikeEvent(bikeEvent domains.BikeEvent) (entities.BikeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBikeEvent", bikeEvent)
	ret0, _ := ret[0].(entities.BikeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBikeEvent indicates an expected call of GetBikeEvent.
func (mr *MockIBikeEventMockRecorder) GetBikeEvent(bikeEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBikeEvent", reflect.TypeOf((*MockIBikeEvent)(nil).GetBikeEvent), bikeEvent)
}

// UpdateBikeEvent mocks base method.
func (m *MockIBikeEvent) UpdateBikeEvent(bikeEvent domains.BikeEvent, organizer uint) (entities.BikeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBikeEvent", bikeEvent, organizer)
	ret0, _ := ret[0].(entities.BikeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBikeEvent indicates an expected call of UpdateBikeEvent.
func (mr *MockIBikeEventMockRecorder) UpdateBikeEvent(bikeEvent, organizer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBikeEvent", reflect.TypeOf((*MockIBikeEvent)(nil).UpdateBikeEvent), bikeEvent, organizer)
}

// UpdateBikeEventAdmin mocks base method.
func (m *MockIBikeEvent) UpdateBikeEventAdmin(bikeEvent domains.BikeEvent) (entities.BikeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBikeEventAdmin", bikeEvent)
	ret0, _ := ret[0].(entities.BikeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBikeEventAdmin indicates an expected call of UpdateBikeEventAdmin.
func (mr *MockIBikeEventMockRecorder) UpdateBikeEventAdmin(bikeEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBikeEventAdmin", reflect.TypeOf((*MockIBikeEvent)(nil).UpdateBikeEventAdmin), bikeEvent)
}
