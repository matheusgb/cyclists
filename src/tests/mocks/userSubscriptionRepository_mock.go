// Code generated by MockGen. DO NOT EDIT.
// Source: src/models/repositories/userSubscription/userSubscriptionRepository.go
//
// Generated by this command:
//
//	mockgen -source=src/models/repositories/userSubscription/userSubscriptionRepository.go -destination=src/tests/mocks/userSubscriptionRepository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domains "github.com/matheusgb/cyclists/src/models/domains/userSubscription"
	entities "github.com/matheusgb/cyclists/src/models/repositories/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserSubscription is a mock of IUserSubscription interface.
type MockIUserSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockIUserSubscriptionMockRecorder
}

// MockIUserSubscriptionMockRecorder is the mock recorder for MockIUserSubscription.
type MockIUserSubscriptionMockRecorder struct {
	mock *MockIUserSubscription
}

// NewMockIUserSubscription creates a new mock instance.
func NewMockIUserSubscription(ctrl *gomock.Controller) *MockIUserSubscription {
	mock := &MockIUserSubscription{ctrl: ctrl}
	mock.recorder = &MockIUserSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserSubscription) EXPECT() *MockIUserSubscriptionMockRecorder {
	return m.recorder
}

// CheckEventIsFull mocks base method.
func (m *MockIUserSubscription) CheckEventIsFull(userSubscription domains.UserSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEventIsFull", userSubscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckEventIsFull indicates an expected call of CheckEventIsFull.
func (mr *MockIUserSubscriptionMockRecorder) CheckEventIsFull(userSubscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEventIsFull", reflect.TypeOf((*MockIUserSubscription)(nil).CheckEventIsFull), userSubscription)
}

// CheckEventIsValidDate mocks base method.
func (m *MockIUserSubscription) CheckEventIsValidDate(userSubscription domains.UserSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEventIsValidDate", userSubscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckEventIsValidDate indicates an expected call of CheckEventIsValidDate.
func (mr *MockIUserSubscriptionMockRecorder) CheckEventIsValidDate(userSubscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEventIsValidDate", reflect.TypeOf((*MockIUserSubscription)(nil).CheckEventIsValidDate), userSubscription)
}

// CheckUserAndEventExists mocks base method.
func (m *MockIUserSubscription) CheckUserAndEventExists(userSubscription domains.UserSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserAndEventExists", userSubscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUserAndEventExists indicates an expected call of CheckUserAndEventExists.
func (mr *MockIUserSubscriptionMockRecorder) CheckUserAndEventExists(userSubscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserAndEventExists", reflect.TypeOf((*MockIUserSubscription)(nil).CheckUserAndEventExists), userSubscription)
}

// CheckUserIsInEvent mocks base method.
func (m *MockIUserSubscription) CheckUserIsInEvent(userSubscription domains.UserSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserIsInEvent", userSubscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUserIsInEvent indicates an expected call of CheckUserIsInEvent.
func (mr *MockIUserSubscriptionMockRecorder) CheckUserIsInEvent(userSubscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserIsInEvent", reflect.TypeOf((*MockIUserSubscription)(nil).CheckUserIsInEvent), userSubscription)
}

// CreateUserSubscription mocks base method.
func (m *MockIUserSubscription) CreateUserSubscription(userSubscription domains.UserSubscription) (entities.UserSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSubscription", userSubscription)
	ret0, _ := ret[0].(entities.UserSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserSubscription indicates an expected call of CreateUserSubscription.
func (mr *MockIUserSubscriptionMockRecorder) CreateUserSubscription(userSubscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSubscription", reflect.TypeOf((*MockIUserSubscription)(nil).CreateUserSubscription), userSubscription)
}

// DeleteUserSubscription mocks base method.
func (m *MockIUserSubscription) DeleteUserSubscription(userSubscription domains.UserSubscription) (entities.UserSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSubscription", userSubscription)
	ret0, _ := ret[0].(entities.UserSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserSubscription indicates an expected call of DeleteUserSubscription.
func (mr *MockIUserSubscriptionMockRecorder) DeleteUserSubscription(userSubscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSubscription", reflect.TypeOf((*MockIUserSubscription)(nil).DeleteUserSubscription), userSubscription)
}
